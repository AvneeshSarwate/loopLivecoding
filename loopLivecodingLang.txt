A: 1  [2 -1]  [3 ~]  3+ = 

convention - dense tokens - get used to double-spacing

(A) chord
(1) chord degree (wraps around if # > num notes in chord)
(-1) chord degree couning down (lower octave)
(3+) chord degree sharped (3- is flat 3-- double flat (etc)
(~) rest
(=) continuation of last pitch


can use pydal syntax to create a rhytm off the bat, but then 
can take the pattern and "re-rhythmize it" so that you only
take the pitch sequnce from it, but then apply that pitch 
sequence to a rhythm defined in pydal syntax with 'x' chars.
HOWEVER - the melody will play with a space being a quarter note


rebuild this in JS so you can use template literals to build strings
or use python 3.6 - https://medium.com/@owen.philipb/as-of-3-6-you-can-use-the-syntax-15f4e180bc78 
- OSC.py here - https://github.com/Qirky/Troop/blob/OT/src/OSC3.py

if you build this with reactive js a la observable, you could change
an entire "chain" of dependently built patterns just by changing
the definition of something upstream in isolation


================================================================
================================================================


for ramp lang, same syntax as above, but with: 

ccName: 0.4 .2 .3

implementation - supercollider "master" clock to start the ramp, but then at
every buffer, it will just send a list of values to a max line object


================================================================
================================================================


will also need a "hit" lang for times for granulator 2, and midi
notes for iota - same rhythm syntax as prev 2


================================================================
================================================================


also need a generic "on" midi notes command for drones (synth chords, iota, and granulator)

see if you can't rebuild a pitched resonator like the ableton device in just max 


================================================================
================================================================


| / as expansion - ( or maybe repurpose {}? ) 

each sub-expression separated by a top-level space is given the duration of the
"parent" expression 

with the new operator 
this - a a a <|b [a a] b/,  |b b/>
is shorthand for
this - {~, a a a <{~, b [a a] b}, {~, b b}>}

Implemented very similar to expression node in PydalAssembler.py, except each 
child gets the same time duration as the parent node, rather than a split


================================================================
================================================================


Also, linked probabilities - make them global over all expressions


